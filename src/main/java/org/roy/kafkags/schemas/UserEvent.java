/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.roy.kafkags.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8415195565141810652L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserEvent\",\"namespace\":\"org.roy.kafkags.schemas\",\"fields\":[{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"eventType\",\"type\":{\"type\":\"enum\",\"name\":\"EventType\",\"symbols\":[\"CLICK\",\"HOVER\",\"BACK\",\"FORWARD\",\"SCROLL\",\"KEY_PRESS\",\"MOVE\"]}},{\"name\":\"x\",\"type\":\"int\"},{\"name\":\"y\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<UserEvent> ENCODER =
      new BinaryMessageEncoder<UserEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserEvent> DECODER =
      new BinaryMessageDecoder<UserEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence userId;
   private org.roy.kafkags.schemas.EventType eventType;
   private int x;
   private int y;
   private java.time.Instant timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserEvent() {}

  /**
   * All-args constructor.
   * @param userId The new value for userId
   * @param eventType The new value for eventType
   * @param x The new value for x
   * @param y The new value for y
   * @param timestamp The new value for timestamp
   */
  public UserEvent(java.lang.CharSequence userId, org.roy.kafkags.schemas.EventType eventType, java.lang.Integer x, java.lang.Integer y, java.time.Instant timestamp) {
    this.userId = userId;
    this.eventType = eventType;
    this.x = x;
    this.y = y;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return eventType;
    case 2: return x;
    case 3: return y;
    case 4: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (java.lang.CharSequence)value$; break;
    case 1: eventType = (org.roy.kafkags.schemas.EventType)value$; break;
    case 2: x = (java.lang.Integer)value$; break;
    case 3: y = (java.lang.Integer)value$; break;
    case 4: timestamp = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.CharSequence getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public org.roy.kafkags.schemas.EventType getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(org.roy.kafkags.schemas.EventType value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'x' field.
   * @return The value of the 'x' field.
   */
  public int getX() {
    return x;
  }


  /**
   * Sets the value of the 'x' field.
   * @param value the value to set.
   */
  public void setX(int value) {
    this.x = value;
  }

  /**
   * Gets the value of the 'y' field.
   * @return The value of the 'y' field.
   */
  public int getY() {
    return y;
  }


  /**
   * Sets the value of the 'y' field.
   * @param value the value to set.
   */
  public void setY(int value) {
    this.y = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new UserEvent RecordBuilder.
   * @return A new UserEvent RecordBuilder
   */
  public static org.roy.kafkags.schemas.UserEvent.Builder newBuilder() {
    return new org.roy.kafkags.schemas.UserEvent.Builder();
  }

  /**
   * Creates a new UserEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserEvent RecordBuilder
   */
  public static org.roy.kafkags.schemas.UserEvent.Builder newBuilder(org.roy.kafkags.schemas.UserEvent.Builder other) {
    if (other == null) {
      return new org.roy.kafkags.schemas.UserEvent.Builder();
    } else {
      return new org.roy.kafkags.schemas.UserEvent.Builder(other);
    }
  }

  /**
   * Creates a new UserEvent RecordBuilder by copying an existing UserEvent instance.
   * @param other The existing instance to copy.
   * @return A new UserEvent RecordBuilder
   */
  public static org.roy.kafkags.schemas.UserEvent.Builder newBuilder(org.roy.kafkags.schemas.UserEvent other) {
    if (other == null) {
      return new org.roy.kafkags.schemas.UserEvent.Builder();
    } else {
      return new org.roy.kafkags.schemas.UserEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserEvent>
    implements org.apache.avro.data.RecordBuilder<UserEvent> {

    private java.lang.CharSequence userId;
    private org.roy.kafkags.schemas.EventType eventType;
    private int x;
    private int y;
    private java.time.Instant timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.roy.kafkags.schemas.UserEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.x)) {
        this.x = data().deepCopy(fields()[2].schema(), other.x);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.y)) {
        this.y = data().deepCopy(fields()[3].schema(), other.y);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing UserEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(org.roy.kafkags.schemas.UserEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.x)) {
        this.x = data().deepCopy(fields()[2].schema(), other.x);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.y)) {
        this.y = data().deepCopy(fields()[3].schema(), other.y);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.roy.kafkags.schemas.UserEvent.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public org.roy.kafkags.schemas.UserEvent.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public org.roy.kafkags.schemas.EventType getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public org.roy.kafkags.schemas.UserEvent.Builder setEventType(org.roy.kafkags.schemas.EventType value) {
      validate(fields()[1], value);
      this.eventType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public org.roy.kafkags.schemas.UserEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'x' field.
      * @return The value.
      */
    public int getX() {
      return x;
    }


    /**
      * Sets the value of the 'x' field.
      * @param value The value of 'x'.
      * @return This builder.
      */
    public org.roy.kafkags.schemas.UserEvent.Builder setX(int value) {
      validate(fields()[2], value);
      this.x = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'x' field has been set.
      * @return True if the 'x' field has been set, false otherwise.
      */
    public boolean hasX() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'x' field.
      * @return This builder.
      */
    public org.roy.kafkags.schemas.UserEvent.Builder clearX() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'y' field.
      * @return The value.
      */
    public int getY() {
      return y;
    }


    /**
      * Sets the value of the 'y' field.
      * @param value The value of 'y'.
      * @return This builder.
      */
    public org.roy.kafkags.schemas.UserEvent.Builder setY(int value) {
      validate(fields()[3], value);
      this.y = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'y' field has been set.
      * @return True if the 'y' field has been set, false otherwise.
      */
    public boolean hasY() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'y' field.
      * @return This builder.
      */
    public org.roy.kafkags.schemas.UserEvent.Builder clearY() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.roy.kafkags.schemas.UserEvent.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[4], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.roy.kafkags.schemas.UserEvent.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserEvent build() {
      try {
        UserEvent record = new UserEvent();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.eventType = fieldSetFlags()[1] ? this.eventType : (org.roy.kafkags.schemas.EventType) defaultValue(fields()[1]);
        record.x = fieldSetFlags()[2] ? this.x : (java.lang.Integer) defaultValue(fields()[2]);
        record.y = fieldSetFlags()[3] ? this.y : (java.lang.Integer) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.time.Instant) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserEvent>
    READER$ = (org.apache.avro.io.DatumReader<UserEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










